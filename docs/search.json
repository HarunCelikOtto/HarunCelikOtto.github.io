[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Harun Celik",
    "section": "",
    "text": "I’m a PhD student in History trying to do cool things with historical maps. Stick around to see the progress I try to make :)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Historical Mapping",
    "section": "",
    "text": "How to Un-Break R with Arcpy in ArcGIS Pro\n\n\n\n\n\n\n\nReticulate\n\n\nArcGIS PRO\n\n\nArcpy\n\n\nFatal Error\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2023\n\n\nHarun Celik\n\n\n\n\n\n\n  \n\n\n\n\nPackages in Development\n\n\n\n\n\n\n\nMaps\n\n\nProjects\n\n\nR\n\n\nArcGIS\n\n\nPython\n\n\n\n\n\n\n\n\n\n\n\nMar 19, 2023\n\n\nHarun Celik\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Project-Ideas/index.html",
    "href": "posts/Project-Ideas/index.html",
    "title": "Packages in Development",
    "section": "",
    "text": "Below are descriptions of packages under development that I am an author on. Overall their purpose is to help aid humanists and social scientists in working with spatial and tabular data. As you can tell, I like naming these packages based on popular R package conventions even if the projects aren’t exclusively written for R."
  },
  {
    "objectID": "posts/Project-Ideas/index.html#arcgeo",
    "href": "posts/Project-Ideas/index.html#arcgeo",
    "title": "Packages in Development",
    "section": "aRcGeo",
    "text": "aRcGeo\nInitializing an ArcGIS Pro arcpy environment in your R session will now take a single function with the help of aRcGeo. The goal of this package is to help streamline the process of setting up the right python environment as well as importing the arcpy module using reticulate and arcgisbinding to run spatial analysis in R using the ArcGIS family of spatial software. Being able to use arcpy in an R session means that your analysis can also benefit from the growing number of r-spatial packages.\nThe package is currently released and available through HarunCelikOtto/aRcGeo."
  },
  {
    "objectID": "posts/Project-Ideas/index.html#carte",
    "href": "posts/Project-Ideas/index.html#carte",
    "title": "Packages in Development",
    "section": "CaRte",
    "text": "CaRte\nCaRte is a package served as a toolbox for common pre-processing techniques to help with scanned cartographic analysis. The purpose of CaRte is to supply the digital researcher a set of common image pre-processing tools to aid the automation process of digitizing historical maps."
  },
  {
    "objectID": "posts/Project-Ideas/index.html#georfrncr",
    "href": "posts/Project-Ideas/index.html#georfrncr",
    "title": "Packages in Development",
    "section": "GeoRfrncr",
    "text": "GeoRfrncr\nSince automatic georeferencing is still uncommon in GIS software, the GeoRfrncr package is designed to help automate the process of georeferencing scans for historical maps. The package will rely on scanned and pre-processed maps that can be produced using the CaRte package. With less time spent georeferencing, more time is available towards working on the spatial analysis of digitized maps."
  },
  {
    "objectID": "posts/Project-Ideas/index.html#tabulr",
    "href": "posts/Project-Ideas/index.html#tabulr",
    "title": "Packages in Development",
    "section": "TabulR",
    "text": "TabulR\nThis package is inspired as an additional functionality to the tabula-java package used to extract tabular data from PDFs. The primary goal of this package is to have an open source tool which can extract tabular data used in scholarly publications. The availability of data extracted from printed scholarship can help researchers conduct easier analysis by digital means."
  },
  {
    "objectID": "posts/Project-Ideas/index.html#hsus-api",
    "href": "posts/Project-Ideas/index.html#hsus-api",
    "title": "Packages in Development",
    "section": "HSUS API",
    "text": "HSUS API\nThis package is an API that can connect to the tabulated data collected in the Historical Statistics of the United States Millennial Edition Online. The API will require a key for access to any individual or organization which has a subscription."
  },
  {
    "objectID": "posts/Unbreaking-R-Arcpy/index.html",
    "href": "posts/Unbreaking-R-Arcpy/index.html",
    "title": "How to Un-Break R with Arcpy in ArcGIS Pro",
    "section": "",
    "text": "Less than a week ago, I had the pleasure of running into a very annoying problem trying to load the arcpy module for python in R using reticulate. I found that after setting up the right python environments to work with arcpy, I could load in most of the modules except for those in the arc_ family.\nI did not find information addressing this concern directly so I wanted to document this behavior for anyone else trying to use arcpy in R."
  },
  {
    "objectID": "posts/Unbreaking-R-Arcpy/index.html#requirements",
    "href": "posts/Unbreaking-R-Arcpy/index.html#requirements",
    "title": "How to Un-Break R with Arcpy in ArcGIS Pro",
    "section": "Requirements",
    "text": "Requirements\n\nArcGIS Pro 1.1 or later\nR Statistical Computing Software, 3.5 or later\n64-bit version required for ArcGIS Pro (Note: the installer installs both by default).\nInstallation of the arcgisbinding package for R\nClone of the arcgispro-py3 python environment"
  },
  {
    "objectID": "posts/Unbreaking-R-Arcpy/index.html#establishing-a-connection-to-arcgis",
    "href": "posts/Unbreaking-R-Arcpy/index.html#establishing-a-connection-to-arcgis",
    "title": "How to Un-Break R with Arcpy in ArcGIS Pro",
    "section": "Establishing a Connection to ArcGIS",
    "text": "Establishing a Connection to ArcGIS\nThe issue seems to arise out of licensing requirements from the arcpy module. This is the assumption because modules like arcgis and other non-licensing required modules can be imported successfully. To be able to check out the license for ArcGIS in R, we will need to have the R-ArcGIS bridge installed.\nOnce r-bridge is installed and a directory is set within the geoprocessing options of ArcGIS we can call the library for arcgisbinding to use the function arc.check_product().\n\nlibrary(arcgisbinding)\n\n*** Please call arc.check_product() to define a desktop license.\n\narc.check_product()\n\nproduct: ArcGIS Pro (13.1.0.41833)\nlicense: Advanced\nversion: 1.0.1.300 \n\n\nIf the function runs successfully, then the connection to ArcGIS has been initialized and licensing has been established. We can additionally check the license by storing arc.check_product() in a variable and calling $license on it.\n\ninfo <- arc.check_product()\n\ninfo$license\n\n[1] \"Advanced\""
  },
  {
    "objectID": "posts/Unbreaking-R-Arcpy/index.html#setting-environment-in-reticulate",
    "href": "posts/Unbreaking-R-Arcpy/index.html#setting-environment-in-reticulate",
    "title": "How to Un-Break R with Arcpy in ArcGIS Pro",
    "section": "Setting Environment in Reticulate",
    "text": "Setting Environment in Reticulate\nOnce a connection to ArcGIS has been initialized, we need to inform reticulate about which python executable it should be running. If you use ArcGIS Pro, you will need to clone the original environment in order to use arcpy functionality. Like the original, the clone is a conda environment that one should be able to access. There are two ways we can tell reticulate to use this cloned environment.\n\nSetting a Global Option\nThe first option is to set a global python interpreter inside of RStudio. This can be done quite easily through the Tools > Global Options > Python > Select > Conda settings. Once you’ve selected the right environment, your python scripts should run from the python executable in that environment.\n\n\nUsing use_condaenv()\nAnother way is to call the use_condaenv() function to establish the path to the python executable file.\n\nlibrary(reticulate)\n\nuse_condaenv(\"../conda/env/arcgispro-py3-clone/python.exe\",\n             required = TRUE)\n\n# The first argument is the path\n# The second argument ensures that you get an error if \n# that python.exe file doesn't exist\n\nYou can verify that you are using the right environment by running;\n\npy_config()"
  },
  {
    "objectID": "posts/Unbreaking-R-Arcpy/index.html#importing-arcpy",
    "href": "posts/Unbreaking-R-Arcpy/index.html#importing-arcpy",
    "title": "How to Un-Break R with Arcpy in ArcGIS Pro",
    "section": "Importing arcpy",
    "text": "Importing arcpy\nAfter initializing the license and setting the right environment, we should be able to successfully import the arcpy module.\n\ntry:\n  import arcpy\n  print(\"arcpy successfully imported\")\nexcept:\n  print(\"An exception occured. Import was unsuccessful\")"
  }
]